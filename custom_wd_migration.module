<?php

function custom_wd_migration_menu() {
  $items['admin/wd_migration'] = array(
    'title' => 'WD content Migration',
    'description' => 'content migration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wd_migration_nodes_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}

function wd_migration_nodes_form($form, $form_state){
  $form = array();
  $form['file_fid'] = array(
    '#title' => t('Upload file'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded file should be in xml format.'),
    '#default_value' => variable_get('file_fid', ''),
    '#upload_validators' => array(
      'file_validate_extensions' => array('xml'),
    ),
    '#upload_location' => 'public://karthik/',
    '#process' => array('import_my_file_element_process'),
    '#required' => TRUE,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#validate'][] = 'import_enrollment_number_and_email_validate';
  $form['#submit'][] = 'import_enrollment_number_and_email_submit';
  return $form;
}

function import_my_file_element_process($element, &$form_state, $form) {
  $element = file_managed_file_process($element, $form_state, $form);
  $element['upload_button']['#access'] = FALSE;
  return $element;
}

function import_enrollment_number_and_email_validate($form, $form_state) {
  //echo "<pre>"; print_R($form); die;
}

function import_enrollment_number_and_email_submit($form, &$form_state) {
  batch_set(custom_batch_insert_all_nodes($form, $form_state));
}
function custom_batch_insert_all_nodes($form, &$form_state){
  drupal_set_message('Adding Nodes');
  //echo "<pre>"; echo "\n";
  $file = file_load($form_state['values']['file_fid']);
  $xmlstr = file_get_contents($file->uri);
  $xml = new SimpleXmlElement($xmlstr);
  foreach ($xml->channel->item as $entry) {
    //$dc = $entry->children("http://purl.org/dc/elements/1.1/");
    // read children data
    $namespaces = $entry->getNameSpaces(true);
    $dc = $entry->children($namespaces['dc']); 
    $content = $entry->children($namespaces['content']); 
    $excerpt = $entry->children($namespaces['excerpt']);
    $wp = $entry->children($namespaces['wp']);

    // reading comment data (to be tested)
    foreach($wp->comment->commentmeta as $wp_meta) {
      $meta_key = $wp_meta->meta_key;
      if($meta_key == "akismet_as_submitted") {
        $comment = (string) $wp_meta->meta_value;
        //print_R($comment); die;
      }
    }

    // reading meta tag data
    $meta_meta_title = '';
    $meta_description = '';
    $meta_keywords = '';
    foreach($wp->postmeta as $wp_meta) {
      $meta_key = $wp_meta->meta_key;
      if($meta_key == 'title') {
	$meta_meta_title[LANGUAGE_NONE][0]['metatags_quick'] = substr((string) $wp_meta->meta_value, 0, 10) . '...';
        $meta_meta_title[LANGUAGE_NONE][0]['meta_name'] = 'title';
      }
      if($meta_key == 'description') {
	$meta_description[LANGUAGE_NONE][0]['metatags_quick'] = substr((string) $wp_meta->meta_value, 0, 10) . '...';
        $meta_description[LANGUAGE_NONE][0]['meta_name'] = 'description';
      }
      if($meta_key == 'keywords') {
	$meta_keywords[LANGUAGE_NONE][0]['metatags_quick'] = substr((string) $wp_meta->meta_value, 0, 10) . '...';
        $meta_keywords[LANGUAGE_NONE][0]['meta_name'] = 'keywords';
      }
    }
    $catagorytags = array();
    $seotags = array();
    foreach($entry->category as $category) {
      $category_key = (string) $category->attributes()->domain;
      if($category_key == 'category') {
         $category_nicename = (string) $category;
         $term = taxonomy_get_term_by_name($category_nicename);
         if(!empty($term)) { // in case term name not exist in vocabulary, not doing anything.
           $catagorytags[LANGUAGE_NONE][]['tid'] = array_keys($term)[0];
         }
         // in case term not existing, we are creating new one. (to be tested)
         else {
           $newterm = new stdClass();
           $newterm->vid = "";
           $newterm->name = $category_nicename;
           taxonomy_term_save($newterm);
           $term = taxonomy_get_term_by_name($category_nicename);
           $catagorytags[LANGUAGE_NONE][]['tid'] = array_keys($term)[0];
         }
      }
      if($category_key == 'post_tag') {
         $category_nicename = (string) $category;
         $term = taxonomy_get_term_by_name($category_nicename);
         if(!empty($term)) { // in case term name not exist in vocabulary, not doing anything.
           $seotags[LANGUAGE_NONE][]['tid'] = array_keys($term)[0];
         }
         // in case term not existing, we are creating new one. (to be tested)
         else {
           $newterm = new stdClass();
           $newterm->vid = "";
           $newterm->name = $category_nicename;
           taxonomy_term_save($newterm);
           $term = taxonomy_get_term_by_name($category_nicename);
           $catagorytags[LANGUAGE_NONE][]['tid'] = array_keys($term)[0];
         }
      }
    }

    // create new node
    global $user;
    $node = new StdClass();
    $node->type = 'article';
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    $node->title = (string) $entry->title;
    $node_body = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => (string) $content->encoded,
          'summary' => '',
          'format' => 'rich_text_format',
          'safe_value]' => (string) $content->encoded,
          'safe_summary' => '',
        )
      )
    );
    $node->body = $node_body;
    $node->field_tags = $seotags;
    $node->field_category = $catagorytags;
    $node->meta_meta_title = $meta_meta_title;
    $node->meta_description = $meta_description;
    $node->meta_keywords = $meta_keywords;
    //print_R($node);
    $node->status = 1;

    // add comment value comment (to be tested)
    $node->comment = 1; // comment always open
    // should iterate in for loop and save nodes
    $comment = (object) array(
      'nid' => $node_id,
      'cid' => 0,
      'pid' => 0,
      'uid' => 1,
      'mail' => '',
      'is_anonymous' => 0,
      'homepage' => '',
      'status' => COMMENT_PUBLISHED,
      'subject' => 'dsk subject',
      'language' => LANGUAGE_NONE,
      'comment_body' => array(
        LANGUAGE_NONE => array(
          0 => array (
            'value' => 'aaa',
            'format' => 'filtered_html'
          )
        )
      ),
    );  
    comment_submit($comment);
    //comment_save($comment);

    // this will run if only user exist in the site (to be tested)
    $user = user_load_by_name($dc->creator);
    $node->uid = $user->uid;

    $node = node_submit($node);
    //node_save($node);
    $operations[] = array('custom_batch_insert_each_nodes', array($node));
  }
  //die;
  $batch = array(
    'operations' => $operations,
    'finished' => 'custom_batch_insert_all_nodes_finished',
  );
  return $batch;
}
function custom_batch_insert_each_nodes($node, &$context) {
  $context['message'] = t('Processing node "@title"', array('@title' => $node->title));
  node_save($node);
  drupal_set_message($node->title . " added.");
}
function custom_batch_insert_all_nodes_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('All above nodes processed.'));
  } else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}




/*
echo $count = db_query("select nid from {node} where type='article'")->rowCount();
*/
/*
$node = node_load(4808);
print_R($node);
*/

/*
Title
description
seotags
categaries
meta title
meta desc
meta keywords
*/

















